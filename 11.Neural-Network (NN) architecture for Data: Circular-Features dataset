import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_circles

# Generate Circular-Features dataset
X, y = make_circles(n_samples=1000, noise=0.05, factor=0.5, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define Neural Network model
model = Sequential([
    Dense(4, activation='linear', input_shape=(2,)),
    Dense(4, activation='linear'),
    Dense(4, activation='linear'),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Compile model with learning rate 0.1
optimizer = SGD(learning_rate=0.1)
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test), verbose=1)

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=0)
print(f'Test Accuracy: {test_acc * 100:.2f}%')

# Plot decision boundary
def plot_decision_boundary(model, X, y):
    xx, yy = np.meshgrid(np.linspace(-1.5, 1.5, 200), np.linspace(-1.5, 1.5, 200))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, levels=[0, 0.5, 1], cmap='coolwarm', alpha=0.6)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm', edgecolors='k')
    plt.title('Decision Boundary')
    plt.show()

plot_decision_boundary(model, X_test, y_test)

# Observations:
# - If the test accuracy is low, the linear activation might not be sufficient for complex patterns.
# - Consider using non-linear activation functions like ReLU for better feature extraction.
