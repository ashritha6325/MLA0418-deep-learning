import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split
N = 100 # number of points per class
D = 2 # dimensionality
K = 2 # number of classes
X = np.zeros((N*K,D)) # data matrix (each row = single example)
y = np.zeros(N*K, dtype='uint8') # class labels
for j in range(K):
    ix = range(N*j,N*(j+1))
    r = np.linspace(0.0,1,N) # radius
    t = np.linspace(j*4,(j+1)*4,N) + np.random.randn(N)*0.2 # theta
    X[ix] = np.c_[r*np.sin(t), r*np.cos(t)]
    y[ix] = j

# 2. Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Define the Neural Network Architecture
model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(D,)),  # Input layer with 2 features
    tf.keras.layers.Dense(4, activation='linear'),  # Hidden layer 1 with 4 neurons and linear activation
    tf.keras.layers.Dense(4, activation='linear'),  # Hidden layer 2 with 4 neurons and linear activation
    tf.keras.layers.Dense(4, activation='linear'),  # Hidden layer 3 with 4 neurons and linear activation
    tf.keras.layers.Dense(K, activation='softmax')  # Output layer with 2 neurons (for 2 classes) and softmax activation
])

# 4. Compile the Model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.1),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 5. Train the Model
history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))

# 6. Evaluate the Model
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy:.4f}')

# (Optional) Plot the Decision Boundary
# ... (Code for plotting decision boundary) ...
