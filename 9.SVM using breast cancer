import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

# Load the dataset
file_path = "/content/breastcancer.csv"
df = pd.read_csv(file_path)

# Ensure dataset has the necessary columns
if 'diagnosis' not in df.columns:  # Changed column name to match the actual name
    raise ValueError("Dataset must contain a 'diagnosis' column.")

# Encode 'diagnosis' column (Malignant=1, Benign=0)
df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})  # Changed column name to match the actual name


# Drop any missing values
df = df.dropna()

# Splitting dataset into features and target variable
X = df.drop(columns=['diagnosis'])  # Changed column name to match the actual name # Features
y = df['diagnosis']  # Changed column name to match the actual name # Target

# Ensure dataset is not empty after preprocessing
if X.empty or y.empty:
    raise ValueError("Feature set or target variable is empty after preprocessing.")

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardizing features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train SVM classifier
svm_model = SVC(kernel='linear', C=1.0, random_state=42)
svm_model.fit(X_train, y_train)

# Make predictions
y_pred = svm_model.predict(X_test)

# Compute confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

# Compute accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Detection Accuracy:", accuracy)

# Classification report
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot confusion matrix
plt.figure(figsize=(5, 5))
plt.imshow(conf_matrix, cmap='Blues', interpolation='nearest')
plt.title('Confusion Matrix')
plt.colorbar()
plt.xticks([0, 1], ['Benign', 'Malignant'])
plt.yticks([0, 1], ['Benign', 'Malignant'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

for i in range(2):
    for j in range(2):
        plt.text(j, i, conf_matrix[i, j], ha='center', va='center', color='red')

plt.show()
